form {
	box-sizing: border-box;
	text-align: left;
	display: inline-block;
	min-width: 12em;
}

form *,
form *::before,
form *::after {
	box-sizing: border-box;
}

//text box

.text-input {
	display: block;
	height: calc(var(--input-size) * 1.5);
	width: 100%;
	padding: 0 0 0 calc(var(--spacing-unit) / 2);
	margin-bottom: calc(var(--spacing-unit) * 2);
	font-size: inherit;
	border: 1px solid var(--input-border-color);
}

.text-input:focus {
	border-bottom-color: var(--input-color);
	outline: none;
}

.text-input__label {
	display: block;
	margin-bottom: calc(var(--spacing-unit) / 2);
}

//checkboxes and radio buttons

.checkbox,
.radio {
	position: absolute;
	left: -9999px;
}

.checkbox__label,
.radio__label {
	display: flex;
	align-items: center;
	position: relative;
	height: var(--input-size);
	padding-left: calc(var(--input-size) * 1.25);
	margin-bottom: calc(var(--spacing-unit) / 4);
	cursor: pointer;
}

.checkbox__label::before,
.checkbox__label::after,
.radio__label::before,
.radio__label::after {
	content: '';
	position: absolute;
   	top: 0;
	left: 0;
}

.checkbox__label::before,
.radio__label::before {
	display: block;
	width: var(--input-size);
	height: var(--input-size);
	border: 2px solid var(--input-color);
}

.radio__label::before,
.radio__label::after {
	border-radius: 50%;
}

input:focus + .checkbox__label::before,
input:focus + .radio__label::before {
	box-shadow: 0 0 0.5em 0.025em rgba(0,0,0,0.2);
	border-color:  var(--input-border-color__active);

}

.checkbox__label::after,
.radio__label::after {
	width: calc(var(--input-size) - (var(--spacing-unit) / 2));
	height: calc(var(--input-size) - (var(--spacing-unit) / 2));
	box-sizing: border-box;
	margin: calc(var(--spacing-unit) / 4);
	background-color: var(--input-color);
	transform: scale(0);
	transform-origin: 50%;
	transition: transform 150ms;
}

input:checked + .checkbox__label::after,
input:checked + .radio__label::after {
	transform: scale(1);
}

input[disabled] + .checkbox__label::before,
input[disabled] + .radio__label::before {
	border-color: var(--input-border-color__disabled);
}

input:checked[disabled] + .checkbox__label::after,
input:checked[disabled] + .radio__label::after {
	background-color: var(--input-border-color__disabled);
}

//this mixing handles creating all CSS for the IE 11 fallback and defines the custom CSS properties (values) for all other browsers
//this can be called with no parameters to style a properly structured table with no class

@mixin customForm($className:'null', $inputSize:1em, $spacingUnit:1rem, $inputColor:#d87a00, $inputBorderColor:#ddd) {

	$inputBorderColorDisabled: darken($inputBorderColor, 30%);
	$inputBorderColorActive: darken($inputBorderColor, 45%);

	@if $className == 'null'
	{
		:root {
			--input-size: $inputSize;
			--spacing-unit: $spacingUnit;
			--input-color: $inputColor;
			--input-border-color: $inputBorderColor;
			--input-border-color__disabled: $inputBorderColorDisabled;
			--input-border-color__active: $inputBorderColorActive;
		}

	} @else {

		#{$className} {
			--input-size: $inputSize;
			--input-color: $inputColor;
			--spacingUnit: $spacingUnit;
			--input-border-color: $inputBorderColor;
			--input-border-color__disabled: $inputBorderColorDisabled;
			--input-border-color__active: $inputBorderColorActive;
		}
	}

	@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {

		@include qualifySelector($className) {

			.text-input {
				height: ($inputSize * 1.25);			
				padding: 0 0 0 ($spacingUnit / 2);		
				margin-bottom: ($spacingUnit * 2);		
				border: 1px solid $inputBorderColor;
			}

			.text-input:focus {
				border-bottom-color: $inputColor;
			}

			.text-input__label {
				margin-bottom: ($spacingUnit / 2);
			}

			.checkbox__label,
			.radio__label {
				height: $inputSize;	
				padding-left: $inputSize * 1.25;
				margin-bottom: $spacingUnit / 4; 
			}
		
			.checkbox__label::before,
			.radio__label::before {
				width: $inputSize;		
				height: $inputSize;
				border: 2px solid $inputColor;
			}

			input:focus + .checkbox__label::before,
			input:focus + .radio__label::before {
				border-color:  $inputBorderColorActive;

			}
		
			.checkbox__label::after,
			.radio__label::after {
				margin: $spacingUnit / 4;
				width: calc(#{$inputSize} - (#{$spacingUnit} / 2));
				height: calc(#{$inputSize} - (#{$spacingUnit} / 2));
				background-color: $inputColor;
			}

			input[disabled] + .checkbox__label::before,
			input[disabled] + .radio__label::before {
				border-color: $inputBorderColorDisabled;
			}

			input:checked[disabled] + .checkbox__label::after,
			input:checked[disabled] + .radio__label::after {
				background-color: $inputBorderColorDisabled;
			}
		}
	}
}

@mixin qualifySelector($className:'null')
{
	@if $className == 'null'{
		@content;
	} 
	@else {
		#{$className} {
			@content;
		}
	}
}